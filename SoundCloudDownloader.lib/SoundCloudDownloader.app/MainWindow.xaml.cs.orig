using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Forms;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using Microsoft.Win32;
using SoundCloudDownloader.lib;
using DataGrid = System.Windows.Controls.DataGrid;
using MessageBox = System.Windows.MessageBox;
using System.Windows.Controls;
using Newtonsoft.Json.Linq;

namespace SoundCloudDownloader.app
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private DataSaver _dataSaver;
        private List<SoundDownloader> _favoritesList;
        private List<TrackInformation> _tracksInfo;
        private string _selectedPath = Environment.GetFolderPath(Environment.SpecialFolder.MyMusic);
        private bool _paused = false;
        private DownloadQueue queue;

        private Thread _downloadThread;
        public MainWindow()
        {
            _dataSaver = new DataSaver();
            InitializeComponent();
            JArray d = SoundCloud.GetPlaylist("https://soundcloud.com/valentinchatelain/sets/electro");
        }

        private void fetchFavoritesButton_Click(object sender, RoutedEventArgs e)
        {
            if (Util.ValidUser(urlTextBox.Text))
            {
                User u = SoundCloud.GetUser(urlTextBox.Text);

                BitmapImage avatar = new BitmapImage();
                avatar.BeginInit();
                avatar.UriSource = new Uri(u.AvatarUrl);
                avatar.CacheOption = BitmapCacheOption.OnLoad;
                avatar.EndInit();
                avatarImage.Source = avatar;

                _favoritesList = SoundCloud.GetAllFavorites(urlTextBox.Text.ToString());

                var songs = _dataSaver.Load();
                if (songs != null)
                {
                    for (int i = 0; i < _favoritesList.Count; i++)
                    {
                        for (int j = 0; j < songs.Count; j++)
                        {
                            if (songs[j].Title == _favoritesList[i].TrackInformation.Title)
                            {
                                _favoritesList[i].IsCompleted = true;
                                _favoritesList[i].TrackInformation.Downloaded = true;
                                //_favoritesList.Remove(_favoritesList[i]);
                            }
                        }

                    }
                }


                if (songsGrid.IsLoaded)
                {
                    _tracksInfo = GetTrackInformations(_favoritesList);
                    songsGrid.ItemsSource = _tracksInfo;
                }
            }
            else
            {
                MessageBox.Show("Invalid username");
            }

        }


        private List<TrackInformation> GetTrackInformations(List<SoundDownloader> soundList)
        {
            List<TrackInformation> trackList = new List<TrackInformation>();

            foreach (SoundDownloader s in soundList)
            {
                s.OnCompleted += new SoundDownloader.OnCompletedEventHandler(OnCompletedDownload);
                trackList.Add(s.TrackInformation);
            }

            return trackList;
        }

        private void OnCompletedDownload(object sender)
        {
            SoundDownloader sound = sender as SoundDownloader;
            
            this.Dispatcher.Invoke(() =>
            {
                songsGrid.Items.Refresh();
                songsGrid.ItemsSource = _tracksInfo;
                _dataSaver.SaveTrack(sound.TrackInformation);
            });


        }

        private void songsGrid_Loaded(object sender, RoutedEventArgs e)
        {
            var items = new List<TrackInformation>();

            var grid = sender as DataGrid;
            grid.ItemsSource = items;
        }

        private void Button_Click(object sender, RoutedEventArgs e)
        {

            if (!_paused)
            {
                downloadButton.Content = "Pause";
                _paused = true;
                if (queue != null)
                {
                    if (queue.IsPaused)
                    {
                        if (_downloadThread == null)
                        {
                            _downloadThread = new Thread(() =>
                            {
                                queue.Resume();
                            });
                            _downloadThread.Start();
                        }
                        else
                        {
                            _downloadThread.Abort();
                            _downloadThread = new Thread(() =>
                            {
                                queue.Resume();
                            });
                            _downloadThread.Start();
                        }
                        

                    }
                }
                if (_downloadThread == null)
                {
                    _downloadThread = new Thread(() =>
                    {
                        queue = new DownloadQueue(_selectedPath, _favoritesList);
                        queue.StartDownload();
                    });
                    _downloadThread.Start();
                }
                else
                {
                    _downloadThread.Abort();
                    _downloadThread = new Thread(() =>
                    {
                        queue = new DownloadQueue(_selectedPath, _favoritesList);
                        queue.StartDownload();
                    });
                    _downloadThread.Start();
                }
                
            }
            else
            {
                if (queue != null)
                {
                    queue.Pause();
                }
                downloadButton.Content = "Download all";
                _paused = false;
            }
            
        }

        public string SelectedPath
        {
            get { return _selectedPath; }
        }

        private void SelectDirectoryClick(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.FolderBrowserDialog saveFileDialog = new System.Windows.Forms.FolderBrowserDialog
            {
                
            };
            DialogResult d = saveFileDialog.ShowDialog();

            if (d == System.Windows.Forms.DialogResult.OK)
            {
                _selectedPath = saveFileDialog.SelectedPath;
            }
        }

        private void DownloadSingleTrackClick(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.FolderBrowserDialog saveFileDialog = new System.Windows.Forms.FolderBrowserDialog
            {
                RootFolder = Environment.SpecialFolder.MyMusic
            };
            DialogResult d = saveFileDialog.ShowDialog();

            var path ="";
            if (d == System.Windows.Forms.DialogResult.OK)
            {
                path = saveFileDialog.SelectedPath;
            }

            string s = Microsoft.VisualBasic.Interaction.InputBox("Put a soundcloud track link \nIt will be saved in : " + path,
                                           "Download single track",
                                           "",
                                           -1, -1);

            string song = s;
            if (Util.ValidTrackLink(s))
            {
                SoundCloud.DownloadTrack(s, path);
                MessageBox.Show("Done !");
            }
            Debug.Print(s);
        }

        private void DownloadMultipleTracksClick(object sender, RoutedEventArgs e)
        {
            MultipleTrackDownloaderWindow m = new MultipleTrackDownloaderWindow(this);
            m.ShowDialog();
        }

<<<<<<< HEAD
        private void DownloadPlaylistTracksClick(object sender, RoutedEventArgs e)
        {
            PlaylistDownloaderWindow p = new PlaylistDownloaderWindow(this);
            p.ShowDialog();
=======
        private void DownloadArtistTracksClick(object sender, RoutedEventArgs e)
        {
            System.Windows.Forms.FolderBrowserDialog saveFileDialog = new System.Windows.Forms.FolderBrowserDialog
            {
                RootFolder = Environment.SpecialFolder.MyMusic
            };
            DialogResult d = saveFileDialog.ShowDialog();

            var path = "";
            if (d == System.Windows.Forms.DialogResult.OK)
            {
                path = saveFileDialog.SelectedPath;
            }

            string user = Microsoft.VisualBasic.Interaction.InputBox("Put a soundcloud username \nIt will be saved in : " + path,
                                           "Download single track",
                                           "",
                                           -1, -1);

            if (Util.ValidUser(user))
            {
                var sounds = SoundCloud.GetUserTracks(user);

                DownloadQueue queue = new DownloadQueue(path, sounds);
                Thread t = new Thread(() =>
                {
                    queue.StartDownload();
                    MessageBox.Show("Finished !");
                });
                t.Start();
                MessageBox.Show("Download started ! \n" +
                                "Found " + sounds.Count + " tracks from the artist : " + user);
            }
            Debug.Print(user);
>>>>>>> a32129c61dd0cb79a9ad4510486d400cfae0ce4f
        }
    }
}
